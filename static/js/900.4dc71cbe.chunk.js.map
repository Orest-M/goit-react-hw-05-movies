{"version":3,"file":"static/js/900.4dc71cbe.chunk.js","mappings":"sPACA,EAA6B,yBAA7B,EAAkE,wB,SCgElE,EA3Da,WACX,OAA0BA,EAAAA,EAAAA,WAAS,GAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,MAArC,eAAOK,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAwBR,OAtBAE,EAAAA,EAAAA,YAAU,WACRP,GAAS,GACTE,GAAa,GACb,IAAMM,EAAkB,IAAIC,gBAEtBC,EAAU,mCAAG,8GAEWC,EAAAA,EAAAA,IAAUN,EAASG,EAAgBI,QAF9C,OAETC,EAFS,OAGfT,EAAUS,GAHK,gDAKfb,GAAS,GALM,yBAOfE,GAAa,GAPE,4EAAH,qDAYhB,OADAQ,IACO,WACLF,EAAgBM,OACjB,CACF,GAAE,CAACT,IAEAJ,GACK,wCAGLF,GACK,oCAIP,0BACE,eAAIgB,UAAWC,EAAf,gBACGb,QADH,IACGA,OADH,EACGA,EAAQc,KAAKC,KAAI,SAAAC,GAAK,OACrB,2BACE,gBACEC,IACED,EAAME,aAAN,yCACsCF,EAAME,cACxC,iIAENC,IAAI,QACJP,UAAWC,KAEb,uBAAIG,EAAMI,QACV,sCAAcJ,EAAMK,eAXbL,EAAMM,GADM,OAkB9B,C","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cast__list\":\"Cast_cast__list__yNezN\",\"cast__img\":\"Cast_cast__img__IB6ux\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getActors } from 'services/getMovies';\n\nimport css from './Cast.module.css';\n\nconst Cast = () => {\n  const [error, setError] = useState(false);\n  const [isLoading, setIsloading] = useState(false);\n  const [actors, setActors] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setError(false);\n    setIsloading(true);\n    const abortController = new AbortController();\n\n    const fetchMovie = async () => {\n      try {\n        const movieActors = await getActors(movieId, abortController.signal);\n        setActors(movieActors);\n      } catch {\n        setError(true);\n      } finally {\n        setIsloading(false);\n      }\n    };\n\n    fetchMovie();\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error</div>;\n  }\n\n  return (\n    <div>\n      <ul className={css.cast__list}>\n        {actors?.cast.map(actor => (\n          <li key={actor.id}>\n            <img\n              src={\n                actor.profile_path\n                  ? `https://image.tmdb.org/t/p/w500${actor.profile_path}`\n                  : 'https://d3aa3603f5de3f81cb9fdaa5c591a84d5723e3cb.hosting4cdn.com/wp-content/uploads/2020/11/404-poster-not-found-CG17701-1.png'\n              }\n              alt=\"actor\"\n              className={css.cast__img}\n            />\n            <p>{actor.name}</p>\n            <p>Caracter: {actor.character}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["useState","error","setError","isLoading","setIsloading","actors","setActors","movieId","useParams","useEffect","abortController","AbortController","fetchMovie","getActors","signal","movieActors","abort","className","css","cast","map","actor","src","profile_path","alt","name","character","id"],"sourceRoot":""}